{
  "address": "0xF682aD1CAc9De901c7f3dB1580Cb4620Fa1A8718",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_stakingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_feeStage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_blockDeltaFeeStage",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "CreatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        }
      ],
      "name": "UpdatePoolAllocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockDeltaFeeStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimLeftovers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accTokenPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAllocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalReward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_blockDeltas",
          "type": "uint256[]"
        }
      ],
      "name": "setBlockDeltaFeeStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "setEndBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_feeStage",
          "type": "uint256[]"
        }
      ],
      "name": "setFeeStage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_multiplier",
          "type": "uint256"
        }
      ],
      "name": "setMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "setStartBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setTokenPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebtAtBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDepositBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastDepositBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdba13c99d93e971dced468daf24485f79201b05c789c39d79319d118a7346249",
  "receipt": {
    "to": null,
    "from": "0xE293014dC435f2263088cF726a32E537941F96Fa",
    "contractAddress": "0xF682aD1CAc9De901c7f3dB1580Cb4620Fa1A8718",
    "transactionIndex": 13,
    "gasUsed": "2577863",
    "logsBloom": "0x
    "blockHash": "0x45657b5a9aa7eded090e83d838f02e75a165a059eec56e61d150f2c98bc333b4",
    "transactionHash": "0xdba13c99d93e971dced468daf24485f79201b05c789c39d79319d118a7346249",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 12296393,
        "transactionHash": "0xdba13c99d93e971dced468daf24485f79201b05c789c39d79319d118a7346249",
        "address": "0xF682aD1CAc9De901c7f3dB1580Cb4620Fa1A8718",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e293014dc435f2263088cf726a32e537941f96fa"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x45657b5a9aa7eded090e83d838f02e75a165a059eec56e61d150f2c98bc333b4"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 12296393,
        "transactionHash": "0xdba13c99d93e971dced468daf24485f79201b05c789c39d79319d118a7346249",
        "address": "0xF682aD1CAc9De901c7f3dB1580Cb4620Fa1A8718",
        "topics": [
          "0x0e66fff3899e1e2549b2e77654939827a893aadcf0ecb66e5d3b07c357a4162f",
          "0x0000000000000000000000006ee9b76a9cdd69190b5aad2b2f3b3fcb3471228e",
          "0x0000000000000000000000006ee9b76a9cdd69190b5aad2b2f3b3fcb3471228e",
          "0x00000000000000000000000000000000000000000000003635c9adc5dea00000"
        ],
        "data": "0x",
        "logIndex": 45,
        "blockHash": "0x45657b5a9aa7eded090e83d838f02e75a165a059eec56e61d150f2c98bc333b4"
      }
    ],
    "blockNumber": 12296393,
    "cumulativeGasUsed": "3789038",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6ee9b76a9cdd69190b5aad2b2f3b3fcb3471228e",
    "0x6ee9b76a9cdd69190b5aad2b2f3b3fcb3471228e",
    12298067,
    12312447,
    "1000000000000000000000",
    "0xE293014dC435f2263088cF726a32E537941F96Fa",
    [
      2500,
      1000,
      500,
      250,
      100
    ],
    [
      0,
      1200,
      2400,
      3600,
      4800
    ]
  ],
  "solcInputHash": "c21975e0f11e3a43a5a73b297dca75b9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_feeStage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltaFeeStage\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"CreatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"}],\"name\":\"UpdatePoolAllocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockDeltaFeeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLeftovers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_blockDeltas\",\"type\":\"uint256[]\"}],\"name\":\"setBlockDeltaFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setEndBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feeStage\",\"type\":\"uint256[]\"}],\"name\":\"setFeeStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"setMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"setStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebtAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDepositBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastDepositBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAllocation(uint256,uint256)\":{\"details\":\"Add pool reward allocation. Can only be called by the owner.\"},\"claimLeftovers()\":{\"details\":\"Sends leftover tokens to the fee recipient, only owner.\"},\"deposit(uint256,uint256)\":{\"details\":\"Deposit tokens to DuelStaking for reward token allocation.\"},\"emergencyWithdraw(uint256)\":{\"details\":\"Withdraw without caring about rewards. EMERGENCY ONLY. This has 25% slashing fee as same block withdrawals to prevent abuse of this function.\"},\"getMultiplier(uint256,uint256)\":{\"details\":\"Returns reward multiplier over the given _from to _to block.\"},\"getPendingRewards(uint256,address)\":{\"details\":\"Returns pending rewards for user.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBlockDeltaFeeStage(uint256[])\":{\"details\":\"Updates block delta fee stage array, only owner. i.e. [0,1200,2400,3600,4800] for BSC 1200 block ~ 1 hour must be length of 5\"},\"setEndBlock(uint256)\":{\"details\":\"Updates end block, only owner.\"},\"setFeeRecipient(address)\":{\"details\":\"Updates fee recipient, only owner.\"},\"setFeeStage(uint256[])\":{\"details\":\"Updates fee stage, only owner. i.e. [2500,400,300,200,100] = [25%,4%,3%,2%,1%] must be length of 5\"},\"setMultiplier(uint256)\":{\"details\":\"Updates reward multiplier, only owner.\"},\"setStartBlock(uint256)\":{\"details\":\"Updates start block, only owner.\"},\"setTokenPerBlock(uint256)\":{\"details\":\"Updates reward per block, only owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"details\":\"Updates reward vairables for the pool.\"},\"withdraw(uint256,uint256)\":{\"details\":\"Withdraw LP tokens from DuelStaking.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DuelStaking.sol\":\"DuelStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/DuelStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract DuelStaking is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount; // How many staking tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 rewardDebtAtBlock; // the last block user stake\\n        uint256 lastWithdrawBlock; // the last block user withdrew at.\\n        uint256 firstDepositBlock; // the first block user deposited at.\\n        uint256 lastDepositBlock; // the last block user deposited at.\\n    }\\n\\n    struct PoolInfo {\\n        IERC20 token; // Address of staking token contract.\\n        uint256 supply; // supply for this pool\\n        uint256 allocPoint; // How many allocation points assigned to this pool.\\n        uint256 lastRewardBlock; // Last block number that tokens distribution occurs.\\n        uint256 accTokenPerShare; // Accumulated tokens per share, times 1e12. See below.\\n        uint256 totalAllocation; // Total allocation for the pool\\n        uint256 totalReward; // Total rewards for the pool\\n    }\\n    // Basis point base to calculate fees\\n    uint256 public constant FEE_BASE = 10000;\\n\\n    // Reward token instance\\n    IERC20 public immutable rewardToken;\\n\\n    // Address where all fees goes, can be adjusted by the owner\\n    address public feeRecipient;\\n\\n    // Reward token per block, can be adjusted by the owner\\n    uint256 public tokenPerBlock = 1e17;\\n\\n    // Reward bonus multipliers, can be adjusted by the owner\\n    uint256 public bonusMultiplier = 1;\\n\\n    // The block number when rewards starts.\\n    uint256 public startBlock;\\n\\n    // The block number when rewards ends\\n    uint256 public endBlock;\\n\\n    // Pools array\\n    PoolInfo[] public poolInfo;\\n\\n    // Users mapping, poolId => userAddress => UserInfo\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    // Array with fee amount (in basis points) for given stage\\n    uint256[] public feeStage;\\n\\n    // Array with block deltas, used to calculate fee stage,\\n    uint256[] public blockDeltaFeeStage;\\n\\n    event CreatePool(address indexed stakingToken, address indexed rewardToken, uint256 indexed allocation);\\n    event UpdatePoolAllocation(uint256 indexed pid, uint256 indexed allocation);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(\\n        IERC20 _rewardToken,\\n        IERC20 _stakingToken,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _allocation,\\n        address _feeRecipient,\\n        uint256[] memory _feeStage,\\n        uint256[] memory _blockDeltaFeeStage\\n    ) public {\\n        rewardToken = _rewardToken;\\n        feeRecipient = _feeRecipient;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        feeStage = _feeStage;\\n        blockDeltaFeeStage = _blockDeltaFeeStage;\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                token: _stakingToken,\\n                supply: 0,\\n                allocPoint: 1,\\n                lastRewardBlock: startBlock,\\n                accTokenPerShare: 0,\\n                totalAllocation: _allocation,\\n                totalReward: 0\\n            })\\n        );\\n        totalAllocPoint = 1;\\n\\n        emit CreatePool(address(_stakingToken), address(_rewardToken), _allocation);\\n    }\\n\\n    /**\\n     * @dev Updates reward vairables for the pool.\\n     */\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.number <= pool.lastRewardBlock || pool.lastRewardBlock >= endBlock) {\\n            return;\\n        }\\n\\n        if (pool.supply <= 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 toBlock = block.number > endBlock ? endBlock : block.number;\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, toBlock);\\n        uint256 reward = multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n\\n        if (pool.totalReward.add(reward) >= pool.totalAllocation) {\\n            reward = pool.totalAllocation.sub(pool.totalReward);\\n        }\\n\\n        pool.accTokenPerShare = pool.accTokenPerShare.add(reward.mul(1e12).div(pool.supply));\\n        pool.lastRewardBlock = toBlock;\\n        pool.totalReward = pool.totalReward.add(reward);\\n    }\\n\\n    /**\\n     * @dev Deposit tokens to DuelStaking for reward token allocation.\\n     */\\n    function deposit(uint256 _pid, uint256 _amount) external {\\n        require(block.number < endBlock, \\\"DuelStaking: Deposit deadline\\\");\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        updatePool(_pid);\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                safeTokenTransfer(msg.sender, pending);\\n            }\\n        }\\n\\n        user.amount = user.amount.add(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\n\\n        if (user.firstDepositBlock == 0) {\\n            user.firstDepositBlock = block.number;\\n        }\\n        user.lastDepositBlock = block.number;\\n\\n        pool.supply = pool.supply.add(_amount);\\n\\n        pool.token.safeTransferFrom(address(msg.sender), address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw LP tokens from DuelStaking.\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(user.amount >= _amount, \\\"DuelStaking: Withdraw amount exceeds user amount\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 pending = user.amount.mul(pool.accTokenPerShare).div(1e12).sub(user.rewardDebt);\\n\\n        if (pending > 0) {\\n            safeTokenTransfer(msg.sender, pending);\\n        }\\n\\n        if (_amount > 0) {\\n            uint256 fee = getWithdrawalFee(_pid, msg.sender);\\n\\n            uint256 amount = applyFee(fee, _amount);\\n            uint256 feeAmount = calculateFee(fee, _amount);\\n\\n            user.amount = user.amount.sub(_amount);\\n            user.lastWithdrawBlock = block.number;\\n\\n            pool.supply = pool.supply.sub(_amount);\\n\\n            pool.token.safeTransfer(address(msg.sender), amount);\\n            if (feeAmount > 0) {\\n                pool.token.safeTransfer(address(feeRecipient), feeAmount);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(pool.accTokenPerShare).div(1e12);\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * This has 25% slashing fee as same block withdrawals to prevent abuse of this function.\\n     */\\n    function emergencyWithdraw(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        pool.supply = pool.supply.sub(user.amount);\\n\\n        uint256 amount = applyFee(feeStage[0], user.amount);\\n        uint256 feeAmount = calculateFee(feeStage[0], user.amount);\\n\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        pool.token.safeTransfer(address(msg.sender), amount);\\n        if (feeAmount > 0) {\\n            pool.token.safeTransfer(address(feeRecipient), feeAmount);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /**\\n     * @dev Returns reward multiplier over the given _from to _to block.\\n     */\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from).mul(bonusMultiplier);\\n    }\\n\\n    /**\\n     * @dev Returns pending rewards for user.\\n     */\\n    function getPendingRewards(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        if (block.number < startBlock) {\\n            return 0;\\n        }\\n\\n        uint256 accTokenPerShare = pool.accTokenPerShare;\\n        if (block.number > pool.lastRewardBlock && pool.supply != 0) {\\n            uint256 toBlock = block.number > endBlock ? endBlock : block.number;\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, toBlock);\\n            uint256 reward = multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            if (pool.totalReward.add(reward) >= pool.totalAllocation) {\\n                reward = pool.totalAllocation.sub(pool.totalReward);\\n            }\\n            accTokenPerShare = accTokenPerShare.add(reward.mul(1e12).div(pool.supply));\\n        }\\n        return user.amount.mul(accTokenPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    /**\\n     * @dev Add pool reward allocation. Can only be called by the owner.\\n     */\\n    function addAllocation(uint256 _pid, uint256 _amount) public onlyOwner {\\n        updatePool(_pid);\\n        poolInfo[_pid].totalAllocation = poolInfo[_pid].totalAllocation.add(_amount);\\n        emit UpdatePoolAllocation(_pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Updates reward multiplier, only owner.\\n     */\\n    function setMultiplier(uint256 _multiplier) external onlyOwner {\\n        require(_multiplier > 0, \\\"DuelStaking: Zero multiplier\\\");\\n        bonusMultiplier = _multiplier;\\n    }\\n\\n    /**\\n     * @dev Updates fee recipient, only owner.\\n     */\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        require(_feeRecipient != address(0), \\\"DuelStaking: Zero fee recipient\\\");\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /**\\n     * @dev Updates reward per block, only owner.\\n     */\\n    function setTokenPerBlock(uint256 _amount) external onlyOwner {\\n        require(_amount <= 30 * 1e18, \\\"DuelStaking: Max per block 30 tokens\\\");\\n        require(_amount >= 1 * 1e16, \\\"DuelStaking: Min per block 1 token\\\");\\n        tokenPerBlock = _amount;\\n    }\\n\\n    /**\\n     * @dev Updates start block, only owner.\\n     */\\n    function setStartBlock(uint256 _block) external onlyOwner {\\n        require(startBlock > block.number, \\\"DuelStaking: Farming has been started\\\");\\n        require(_block < endBlock, \\\"DuelStaking: Start block should be less then endBlock\\\");\\n\\n        startBlock = _block;\\n        poolInfo[0].lastRewardBlock = startBlock;\\n    }\\n\\n    /**\\n     * @dev Updates end block, only owner.\\n     */\\n    function setEndBlock(uint256 _block) external onlyOwner {\\n        require(endBlock > block.number, \\\"DuelStaking: Farming has been finished\\\");\\n        require(_block > startBlock, \\\"DuelStaking: End block should be greater then startBlock\\\");\\n\\n        endBlock = _block;\\n    }\\n\\n    /**\\n     * @dev Updates fee stage, only owner.\\n     * i.e. [2500,400,300,200,100] = [25%,4%,3%,2%,1%]\\n     * must be length of 5\\n     */\\n    function setFeeStage(uint256[] memory _feeStage) external onlyOwner {\\n        require(_feeStage.length == feeStage.length, \\\"DuelStaking: FeeStage array mismatch\\\");\\n        feeStage = _feeStage;\\n    }\\n\\n    /**\\n     * @dev Updates block delta fee stage array, only owner.\\n     * i.e. [0,1200,2400,3600,4800] for BSC 1200 block ~ 1 hour\\n     * must be length of 5\\n     */\\n    function setBlockDeltaFeeStage(uint256[] memory _blockDeltas) external onlyOwner {\\n        require(_blockDeltas.length == blockDeltaFeeStage.length, \\\"DuelStaking: BlockDeltaFeeStage array mismatch\\\");\\n        blockDeltaFeeStage = _blockDeltas;\\n    }\\n\\n    /**\\n     * @dev Sends leftover tokens to the fee recipient, only owner.\\n     */\\n    function claimLeftovers() external onlyOwner {\\n        require(poolInfo[0].supply == 0, \\\"DuelStaking: Not all users has claimed\\\");\\n\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n\\n        require(balance > 0, \\\"DuelStaking: Zero balance\\\");\\n\\n        safeTokenTransfer(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @dev Safe token transfer function, just in case if rounding error\\n     * causes pool to not have enough token balance.\\n     */\\n    function safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        if (_amount > balance) {\\n            rewardToken.transfer(_to, balance);\\n        } else {\\n            rewardToken.transfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev it calculates (1 - fee) * amount\\n     * Applies the fee by subtracting fees from the amount and returns\\n     * the amount after deducting the fee.\\n     */\\n    function applyFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\\n        return _amount.mul(FEE_BASE.sub(_feeInBips)).div(FEE_BASE);\\n    }\\n\\n    /**\\n     * @dev it calculates fee * amount\\n     * Calculates the fee amount.\\n     */\\n    function calculateFee(uint256 _feeInBips, uint256 _amount) internal pure returns (uint256) {\\n        return _amount.mul(_feeInBips).div(FEE_BASE);\\n    }\\n\\n    /**\\n     * @dev Get withdrawal fee in basis points for the user of the given pool.\\n     */\\n    function getWithdrawalFee(uint256 _pid, address _user) internal view returns (uint256) {\\n        uint256 userBlockDelta = getUserDelta(_pid, _user);\\n\\n        uint256 fee;\\n\\n        if (userBlockDelta == 0 || userBlockDelta <= blockDeltaFeeStage[0]) {\\n            //25% fee for withdrawals in the same block to prevent abuse from flashloans\\n            fee = feeStage[0];\\n        } else if (userBlockDelta > blockDeltaFeeStage[0] && userBlockDelta <= blockDeltaFeeStage[1]) {\\n            fee = feeStage[1];\\n        } else if (userBlockDelta > blockDeltaFeeStage[1] && userBlockDelta <= blockDeltaFeeStage[2]) {\\n            fee = feeStage[2];\\n        } else if (userBlockDelta > blockDeltaFeeStage[2] && userBlockDelta <= blockDeltaFeeStage[3]) {\\n            fee = feeStage[3];\\n        } else if (userBlockDelta > blockDeltaFeeStage[3] && userBlockDelta <= blockDeltaFeeStage[4]) {\\n            fee = feeStage[4];\\n        }\\n\\n        return fee;\\n    }\\n\\n    /**\\n     * @dev Get user blocks delta from last deposit block to current block.\\n     */\\n    function getUserDelta(uint256 _pid, address _user) internal view returns (uint256) {\\n        UserInfo storage user = userInfo[_pid][_user];\\n        if (user.lastWithdrawBlock > 0) {\\n            uint256 estDelta = block.number.sub(user.lastWithdrawBlock);\\n            return estDelta;\\n        } else {\\n            uint256 estDelta = block.number.sub(user.firstDepositBlock);\\n            return estDelta;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe943f4297dbff0488bcb84f71b04e1fbdda35c181b724666fa52b3f794390ebc\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405267016345785d8a0000600255600160035560006008553480156200002757600080fd5b506040516200295b3803806200295b83398181016040526101008110156200004e57600080fd5b815160208301516040808501516060860151608087015160a088015160c089018051955197999698949793969295919483019291846401000000008211156200009657600080fd5b908301906020820185811115620000ac57600080fd5b8251866020820283011164010000000082111715620000ca57600080fd5b82525081516020918201928201910280838360005b83811015620000f9578181015183820152602001620000df565b50505050905001604052602001805160405193929190846401000000008211156200012357600080fd5b9083019060208201858111156200013957600080fd5b82518660208202830111640100000000821117156200015757600080fd5b82525081516020918201928201910280838360005b83811015620001865781810151838201526020016200016c565b505050509050016040525050506000620001a56200040b60201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350606088901b6001600160601b031916608052600180546001600160a01b0319166001600160a01b0385161790556004869055600585905581516200023b9060099060208501906200040f565b5080516200025190600a9060208401906200040f565b506040805160e0810182526001600160a01b038981168083526000602084018181526001858701818152600454606088019081526080880185815260a089018e815260c08a018781526006805480880182559089529a517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f6007909c029b8c0180546001600160a01b031916918c1691909117905595517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d408b015592517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d418a015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d42890155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d43880155517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d4487015590517ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d459095019490945560089390935592518793918c16927f0e66fff3899e1e2549b2e77654939827a893aadcf0ecb66e5d3b07c357a4162f91a4505050505050505062000476565b3390565b8280548282559060005260206000209081019282156200044d579160200282015b828111156200044d57825182559160200191906001019062000430565b506200045b9291506200045f565b5090565b5b808211156200045b576000815560010162000460565b60805160601c6124b3620004a8600039806111a552806118d05280611a175280611aba5280611b6352506124b36000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638dbb1e3a11610104578063c960fdc1116100a2578063ecefc70511610071578063ecefc70514610604578063f2fde38b1461060c578063f35e4a6e14610632578063f7c618c11461064f576101da565b8063c960fdc1146104fb578063e2bbb15814610518578063e6014e021461053b578063e74b981b146105de576101da565b80639ac0d2c0116100de5780639ac0d2c0146104ab578063a408bb4c146104ce578063a8b973a1146104d6578063c713aa94146104de576101da565b80638dbb1e3a1461040c57806393f1a40b1461042f57806398c95c2c1461048e576101da565b8063469048401161017c578063641579a61161014b578063641579a6146103b3578063715018a6146103d057806385dc0aaf146103d85780638da5cb5b14610404576101da565b8063469048401461034d57806348cd4cb11461037157806351eb05a6146103795780635312ea8e14610396576101da565b806319221f47116101b857806319221f4714610260578063411330bd146103055780634198709a14610322578063441a3e701461032a576101da565b8063083c6323146101df5780631526fe27146101f957806317caf6f114610258575b600080fd5b6101e7610657565b60408051918252519081900360200190f35b6102166004803603602081101561020f57600080fd5b503561065d565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6101e76106b3565b6103036004803603602081101561027657600080fd5b81019060208101813564010000000081111561029157600080fd5b8201836020820111156102a357600080fd5b803590602001918460208302840111640100000000831117156102c557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106b9945050505050565b005b6103036004803603602081101561031b57600080fd5b5035610773565b6101e7610868565b6103036004803603604081101561034057600080fd5b508035906020013561086e565b610355610a2f565b604080516001600160a01b039092168252519081900360200190f35b6101e7610a3e565b6103036004803603602081101561038f57600080fd5b5035610a44565b610303600480360360208110156103ac57600080fd5b5035610b7e565b610303600480360360208110156103c957600080fd5b5035610ca5565b610303610d61565b6101e7600480360360408110156103ee57600080fd5b50803590602001356001600160a01b0316610e0d565b610355610f69565b6101e76004803603604081101561042257600080fd5b5080359060200135610f78565b61045b6004803603604081101561044557600080fd5b50803590602001356001600160a01b0316610f93565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6101e7600480360360208110156104a457600080fd5b5035610fd3565b610303600480360360408110156104c157600080fd5b5080359060200135610ff1565b6103036110e1565b6101e761129a565b610303600480360360208110156104f457600080fd5b50356112a0565b6101e76004803603602081101561051157600080fd5b5035611387565b6103036004803603604081101561052e57600080fd5b5080359060200135611394565b6103036004803603602081101561055157600080fd5b81019060208101813564010000000081111561056c57600080fd5b82018360208201111561057e57600080fd5b803590602001918460208302840111640100000000831117156105a057600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061151f945050505050565b610303600480360360208110156105f457600080fd5b50356001600160a01b03166115d5565b6101e76116b4565b6103036004803603602081101561062257600080fd5b50356001600160a01b03166116ba565b6103036004803603602081101561064857600080fd5b50356117bc565b6103556118ce565b60055481565b6006818154811061066a57fe5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b60085481565b6106c16118f2565b6001600160a01b03166106d2610f69565b6001600160a01b03161461071b576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b600a5481511461075c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123fb602e913960400191505060405180910390fd5b805161076f90600a9060208401906121e6565b5050565b61077b6118f2565b6001600160a01b031661078c610f69565b6001600160a01b0316146107d5576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6801a055690d9db8000081111561081d5760405162461bcd60e51b81526004018080602001828103825260248152602001806122936024913960400191505060405180910390fd5b662386f26fc100008110156108635760405162461bcd60e51b81526004018080602001828103825260228152602001806123776022913960400191505060405180910390fd5b600255565b60025481565b60006006838154811061087d57fe5b60009182526020808320868452600780835260408086203387529093529190932080549290910290920192508311156108e75760405162461bcd60e51b81526004018080602001828103825260308152602001806124296030913960400191505060405180910390fd5b6108f084610a44565b600061092a826001015461092464e8d4a5100061091e876004015487600001546118f690919063ffffffff16565b9061194f565b906119b6565b9050801561093c5761093c3382611a13565b83156109d157600061094e8633611c0a565b9050600061095c8287611dc3565b9050600061096a8388611ddf565b855490915061097990886119b6565b8555436003860155600186015461099090886119b6565b600187015585546109ab906001600160a01b03163384611df1565b80156109cd5760015486546109cd916001600160a01b03918216911683611df1565b5050505b600483015482546109ec9164e8d4a510009161091e916118f6565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b6001546001600160a01b031681565b60045481565b600060068281548110610a5357fe5b90600052602060002090600702019050806003015443111580610a7c5750600554816003015410155b15610a875750610b7b565b6000816001015411610a9f5743600390910155610b7b565b60006005544311610ab05743610ab4565b6005545b90506000610ac6836003015483610f78565b90506000610af360085461091e8660020154610aed600254876118f690919063ffffffff16565b906118f6565b90508360050154610b11828660060154611e4390919063ffffffff16565b10610b2c5760068401546005850154610b29916119b6565b90505b6001840154610b5390610b489061091e8464e8d4a510006118f6565b600486015490611e43565b6004850155600384018390556006840154610b6e9082611e43565b8460060181905550505050505b50565b600060068281548110610b8d57fe5b6000918252602080832085845260078083526040808620338752909352919093208054929091029092016001810154909350610bc8916119b6565b82600101819055506000610bf86009600081548110610be357fe5b90600052602060002001548360000154611dc3565b90506000610c226009600081548110610c0d57fe5b90600052602060002001548460000154611ddf565b600080855560018501558454909150610c45906001600160a01b03163384611df1565b8015610c67576001548454610c67916001600160a01b03918216911683611df1565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050505050565b610cad6118f2565b6001600160a01b0316610cbe610f69565b6001600160a01b031614610d07576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b60008111610d5c576040805162461bcd60e51b815260206004820152601c60248201527f4475656c5374616b696e673a205a65726f206d756c7469706c69657200000000604482015290519081900360640190fd5b600355565b610d696118f2565b6001600160a01b0316610d7a610f69565b6001600160a01b031614610dc3576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008060068481548110610e1d57fe5b60009182526020808320878452600780835260408086206001600160a01b038a16875290935291909320600454929091029092019250431015610e6557600092505050610f63565b6004820154600383015443118015610e805750600183015415155b15610f355760006005544311610e965743610e9a565b6005545b90506000610eac856003015483610f78565b90506000610ed360085461091e8860020154610aed600254876118f690919063ffffffff16565b90508560050154610ef1828860060154611e4390919063ffffffff16565b10610f0c5760068601546005870154610f09916119b6565b90505b6001860154610f2f90610f289061091e8464e8d4a510006118f6565b8590611e43565b93505050505b610f5d826001015461092464e8d4a5100061091e8587600001546118f690919063ffffffff16565b93505050505b92915050565b6000546001600160a01b031690565b600354600090610f8c90610aed84866119b6565b9392505050565b6007602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b60098181548110610fe057fe5b600091825260209091200154905081565b610ff96118f2565b6001600160a01b031661100a610f69565b6001600160a01b031614611053576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b61105c82610a44565b61108d816006848154811061106d57fe5b906000526020600020906007020160050154611e4390919063ffffffff16565b6006838154811061109a57fe5b90600052602060002090600702016005018190555080827f9d62c4db36ca3dbbe725182d6fd89028014a7d014452b72741207cde80c7d11f60405160405180910390a35050565b6110e96118f2565b6001600160a01b03166110fa610f69565b6001600160a01b031614611143576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b600660008154811061115157fe5b9060005260206000209060070201600101546000146111a15760405162461bcd60e51b81526004018080602001828103825260268152602001806122476026913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d602081101561123a57600080fd5b5051905080611290576040805162461bcd60e51b815260206004820152601960248201527f4475656c5374616b696e673a205a65726f2062616c616e636500000000000000604482015290519081900360640190fd5b610b7b3382611a13565b60035481565b6112a86118f2565b6001600160a01b03166112b9610f69565b6001600160a01b031614611302576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b43600554116113425760405162461bcd60e51b81526004018080602001828103825260268152602001806122b76026913960400191505060405180910390fd5b60045481116113825760405162461bcd60e51b81526004018080602001828103825260388152602001806123996038913960400191505060405180910390fd5b600555565b600a8181548110610fe057fe5b60055443106113ea576040805162461bcd60e51b815260206004820152601d60248201527f4475656c5374616b696e673a204465706f73697420646561646c696e65000000604482015290519081900360640190fd5b6000600683815481106113f957fe5b6000918252602080832086845260078083526040808620338752909352919093209102909101915061142a84610a44565b80541561147357600061145f826001015461092464e8d4a5100061091e876004015487600001546118f690919063ffffffff16565b90508015611471576114713382611a13565b505b805461147f9084611e43565b808255600483015461149c9164e8d4a510009161091e91906118f6565b600182015560048101546114b1574360048201555b43600582015560018201546114c69084611e43565b600183015581546114e2906001600160a01b0316333086611e9d565b604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b6115276118f2565b6001600160a01b0316611538610f69565b6001600160a01b031614611581576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6009548151146115c25760405162461bcd60e51b81526004018080602001828103825260248152602001806122fe6024913960400191505060405180910390fd5b805161076f9060099060208401906121e6565b6115dd6118f2565b6001600160a01b03166115ee610f69565b6001600160a01b031614611637576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6001600160a01b038116611692576040805162461bcd60e51b815260206004820152601f60248201527f4475656c5374616b696e673a205a65726f2066656520726563697069656e7400604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61271081565b6116c26118f2565b6001600160a01b03166116d3610f69565b6001600160a01b03161461171c576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6001600160a01b0381166117615760405162461bcd60e51b815260040180806020018281038252602681526020018061226d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6117c46118f2565b6001600160a01b03166117d5610f69565b6001600160a01b03161461181e576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b436004541161185e5760405162461bcd60e51b81526004018080602001828103825260258152602001806124596025913960400191505060405180910390fd5b600554811061189e5760405162461bcd60e51b81526004018080602001828103825260358152602001806123426035913960400191505060405180910390fd5b8060048190555060045460066000815481106118b657fe5b90600052602060002090600702016003018190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3390565b60008261190557506000610f63565b8282028284828161191257fe5b0414610f8c5760405162461bcd60e51b81526004018080602001828103825260218152602001806122dd6021913960400191505060405180910390fd5b60008082116119a5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816119ae57fe5b049392505050565b600082821115611a0d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d6020811015611aac57600080fd5b5051905080821115611b61577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611b2f57600080fd5b505af1158015611b43573d6000803e3d6000fd5b505050506040513d6020811015611b5957600080fd5b50611c059050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611bd857600080fd5b505af1158015611bec573d6000803e3d6000fd5b505050506040513d6020811015611c0257600080fd5b50505b505050565b600080611c178484611efd565b90506000811580611c405750600a600081548110611c3157fe5b90600052602060002001548211155b15611c65576009600081548110611c5357fe5b90600052602060002001549050611dbb565b600a600081548110611c7357fe5b906000526020600020015482118015611ca45750600a600181548110611c9557fe5b90600052602060002001548211155b15611cb7576009600181548110611c5357fe5b600a600181548110611cc557fe5b906000526020600020015482118015611cf65750600a600281548110611ce757fe5b90600052602060002001548211155b15611d09576009600281548110611c5357fe5b600a600281548110611d1757fe5b906000526020600020015482118015611d485750600a600381548110611d3957fe5b90600052602060002001548211155b15611d5b576009600381548110611c5357fe5b600a600381548110611d6957fe5b906000526020600020015482118015611d9a5750600a600481548110611d8b57fe5b90600052602060002001548211155b15611dbb576009600481548110611dad57fe5b906000526020600020015490505b949350505050565b6000610f8c61271061091e611dd882876119b6565b85906118f6565b6000610f8c61271061091e84866118f6565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c05908490611f65565b600082820183811015610f8c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611ef7908590611f65565b50505050565b60008281526007602090815260408083206001600160a01b03851684529091528120600381015415611f4c576000611f428260030154436119b690919063ffffffff16565b9250610f63915050565b6000611f428260040154436119b690919063ffffffff16565b6060611fba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120169092919063ffffffff16565b805190915015611c0557808060200190516020811015611fd957600080fd5b5051611c055760405162461bcd60e51b815260040180806020018281038252602a8152602001806123d1602a913960400191505060405180910390fd5b6060611dbb84846000858561202a8561213c565b61207b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106120ba5780518252601f19909201916020918201910161209b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461211c576040519150601f19603f3d011682016040523d82523d6000602084013e612121565b606091505b5091509150612131828286612142565b979650505050505050565b3b151590565b60608315612151575081610f8c565b8251156121615782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121ab578181015183820152602001612193565b50505050905090810190601f1680156121d85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215612221579160200282015b82811115612221578251825591602001919060010190612206565b5061222d929150612231565b5090565b5b8082111561222d576000815560010161223256fe4475656c5374616b696e673a204e6f7420616c6c2075736572732068617320636c61696d65644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734475656c5374616b696e673a204d61782070657220626c6f636b20333020746f6b656e734475656c5374616b696e673a204661726d696e6720686173206265656e2066696e6973686564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774475656c5374616b696e673a204665655374616765206172726179206d69736d617463684f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724475656c5374616b696e673a20537461727420626c6f636b2073686f756c64206265206c657373207468656e20656e64426c6f636b4475656c5374616b696e673a204d696e2070657220626c6f636b203120746f6b656e4475656c5374616b696e673a20456e6420626c6f636b2073686f756c642062652067726561746572207468656e207374617274426c6f636b5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644475656c5374616b696e673a20426c6f636b44656c74614665655374616765206172726179206d69736d617463684475656c5374616b696e673a20576974686472617720616d6f756e742065786365656473207573657220616d6f756e744475656c5374616b696e673a204661726d696e6720686173206265656e2073746172746564a26469706673582212200d4221e0b1746af370b3df01b04771aba595864b09e92b911bd29cb7b3b7bc9f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638dbb1e3a11610104578063c960fdc1116100a2578063ecefc70511610071578063ecefc70514610604578063f2fde38b1461060c578063f35e4a6e14610632578063f7c618c11461064f576101da565b8063c960fdc1146104fb578063e2bbb15814610518578063e6014e021461053b578063e74b981b146105de576101da565b80639ac0d2c0116100de5780639ac0d2c0146104ab578063a408bb4c146104ce578063a8b973a1146104d6578063c713aa94146104de576101da565b80638dbb1e3a1461040c57806393f1a40b1461042f57806398c95c2c1461048e576101da565b8063469048401161017c578063641579a61161014b578063641579a6146103b3578063715018a6146103d057806385dc0aaf146103d85780638da5cb5b14610404576101da565b8063469048401461034d57806348cd4cb11461037157806351eb05a6146103795780635312ea8e14610396576101da565b806319221f47116101b857806319221f4714610260578063411330bd146103055780634198709a14610322578063441a3e701461032a576101da565b8063083c6323146101df5780631526fe27146101f957806317caf6f114610258575b600080fd5b6101e7610657565b60408051918252519081900360200190f35b6102166004803603602081101561020f57600080fd5b503561065d565b604080516001600160a01b0390981688526020880196909652868601949094526060860192909252608085015260a084015260c0830152519081900360e00190f35b6101e76106b3565b6103036004803603602081101561027657600080fd5b81019060208101813564010000000081111561029157600080fd5b8201836020820111156102a357600080fd5b803590602001918460208302840111640100000000831117156102c557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106b9945050505050565b005b6103036004803603602081101561031b57600080fd5b5035610773565b6101e7610868565b6103036004803603604081101561034057600080fd5b508035906020013561086e565b610355610a2f565b604080516001600160a01b039092168252519081900360200190f35b6101e7610a3e565b6103036004803603602081101561038f57600080fd5b5035610a44565b610303600480360360208110156103ac57600080fd5b5035610b7e565b610303600480360360208110156103c957600080fd5b5035610ca5565b610303610d61565b6101e7600480360360408110156103ee57600080fd5b50803590602001356001600160a01b0316610e0d565b610355610f69565b6101e76004803603604081101561042257600080fd5b5080359060200135610f78565b61045b6004803603604081101561044557600080fd5b50803590602001356001600160a01b0316610f93565b604080519687526020870195909552858501939093526060850191909152608084015260a0830152519081900360c00190f35b6101e7600480360360208110156104a457600080fd5b5035610fd3565b610303600480360360408110156104c157600080fd5b5080359060200135610ff1565b6103036110e1565b6101e761129a565b610303600480360360208110156104f457600080fd5b50356112a0565b6101e76004803603602081101561051157600080fd5b5035611387565b6103036004803603604081101561052e57600080fd5b5080359060200135611394565b6103036004803603602081101561055157600080fd5b81019060208101813564010000000081111561056c57600080fd5b82018360208201111561057e57600080fd5b803590602001918460208302840111640100000000831117156105a057600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061151f945050505050565b610303600480360360208110156105f457600080fd5b50356001600160a01b03166115d5565b6101e76116b4565b6103036004803603602081101561062257600080fd5b50356001600160a01b03166116ba565b6103036004803603602081101561064857600080fd5b50356117bc565b6103556118ce565b60055481565b6006818154811061066a57fe5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169650929491939092919087565b60085481565b6106c16118f2565b6001600160a01b03166106d2610f69565b6001600160a01b03161461071b576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b600a5481511461075c5760405162461bcd60e51b815260040180806020018281038252602e8152602001806123fb602e913960400191505060405180910390fd5b805161076f90600a9060208401906121e6565b5050565b61077b6118f2565b6001600160a01b031661078c610f69565b6001600160a01b0316146107d5576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6801a055690d9db8000081111561081d5760405162461bcd60e51b81526004018080602001828103825260248152602001806122936024913960400191505060405180910390fd5b662386f26fc100008110156108635760405162461bcd60e51b81526004018080602001828103825260228152602001806123776022913960400191505060405180910390fd5b600255565b60025481565b60006006838154811061087d57fe5b60009182526020808320868452600780835260408086203387529093529190932080549290910290920192508311156108e75760405162461bcd60e51b81526004018080602001828103825260308152602001806124296030913960400191505060405180910390fd5b6108f084610a44565b600061092a826001015461092464e8d4a5100061091e876004015487600001546118f690919063ffffffff16565b9061194f565b906119b6565b9050801561093c5761093c3382611a13565b83156109d157600061094e8633611c0a565b9050600061095c8287611dc3565b9050600061096a8388611ddf565b855490915061097990886119b6565b8555436003860155600186015461099090886119b6565b600187015585546109ab906001600160a01b03163384611df1565b80156109cd5760015486546109cd916001600160a01b03918216911683611df1565b5050505b600483015482546109ec9164e8d4a510009161091e916118f6565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050505050565b6001546001600160a01b031681565b60045481565b600060068281548110610a5357fe5b90600052602060002090600702019050806003015443111580610a7c5750600554816003015410155b15610a875750610b7b565b6000816001015411610a9f5743600390910155610b7b565b60006005544311610ab05743610ab4565b6005545b90506000610ac6836003015483610f78565b90506000610af360085461091e8660020154610aed600254876118f690919063ffffffff16565b906118f6565b90508360050154610b11828660060154611e4390919063ffffffff16565b10610b2c5760068401546005850154610b29916119b6565b90505b6001840154610b5390610b489061091e8464e8d4a510006118f6565b600486015490611e43565b6004850155600384018390556006840154610b6e9082611e43565b8460060181905550505050505b50565b600060068281548110610b8d57fe5b6000918252602080832085845260078083526040808620338752909352919093208054929091029092016001810154909350610bc8916119b6565b82600101819055506000610bf86009600081548110610be357fe5b90600052602060002001548360000154611dc3565b90506000610c226009600081548110610c0d57fe5b90600052602060002001548460000154611ddf565b600080855560018501558454909150610c45906001600160a01b03163384611df1565b8015610c67576001548454610c67916001600160a01b03918216911683611df1565b604080518381529051869133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a35050505050565b610cad6118f2565b6001600160a01b0316610cbe610f69565b6001600160a01b031614610d07576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b60008111610d5c576040805162461bcd60e51b815260206004820152601c60248201527f4475656c5374616b696e673a205a65726f206d756c7469706c69657200000000604482015290519081900360640190fd5b600355565b610d696118f2565b6001600160a01b0316610d7a610f69565b6001600160a01b031614610dc3576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60008060068481548110610e1d57fe5b60009182526020808320878452600780835260408086206001600160a01b038a16875290935291909320600454929091029092019250431015610e6557600092505050610f63565b6004820154600383015443118015610e805750600183015415155b15610f355760006005544311610e965743610e9a565b6005545b90506000610eac856003015483610f78565b90506000610ed360085461091e8860020154610aed600254876118f690919063ffffffff16565b90508560050154610ef1828860060154611e4390919063ffffffff16565b10610f0c5760068601546005870154610f09916119b6565b90505b6001860154610f2f90610f289061091e8464e8d4a510006118f6565b8590611e43565b93505050505b610f5d826001015461092464e8d4a5100061091e8587600001546118f690919063ffffffff16565b93505050505b92915050565b6000546001600160a01b031690565b600354600090610f8c90610aed84866119b6565b9392505050565b6007602090815260009283526040808420909152908252902080546001820154600283015460038401546004850154600590950154939492939192909186565b60098181548110610fe057fe5b600091825260209091200154905081565b610ff96118f2565b6001600160a01b031661100a610f69565b6001600160a01b031614611053576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b61105c82610a44565b61108d816006848154811061106d57fe5b906000526020600020906007020160050154611e4390919063ffffffff16565b6006838154811061109a57fe5b90600052602060002090600702016005018190555080827f9d62c4db36ca3dbbe725182d6fd89028014a7d014452b72741207cde80c7d11f60405160405180910390a35050565b6110e96118f2565b6001600160a01b03166110fa610f69565b6001600160a01b031614611143576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b600660008154811061115157fe5b9060005260206000209060070201600101546000146111a15760405162461bcd60e51b81526004018080602001828103825260268152602001806122476026913960400191505060405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d602081101561123a57600080fd5b5051905080611290576040805162461bcd60e51b815260206004820152601960248201527f4475656c5374616b696e673a205a65726f2062616c616e636500000000000000604482015290519081900360640190fd5b610b7b3382611a13565b60035481565b6112a86118f2565b6001600160a01b03166112b9610f69565b6001600160a01b031614611302576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b43600554116113425760405162461bcd60e51b81526004018080602001828103825260268152602001806122b76026913960400191505060405180910390fd5b60045481116113825760405162461bcd60e51b81526004018080602001828103825260388152602001806123996038913960400191505060405180910390fd5b600555565b600a8181548110610fe057fe5b60055443106113ea576040805162461bcd60e51b815260206004820152601d60248201527f4475656c5374616b696e673a204465706f73697420646561646c696e65000000604482015290519081900360640190fd5b6000600683815481106113f957fe5b6000918252602080832086845260078083526040808620338752909352919093209102909101915061142a84610a44565b80541561147357600061145f826001015461092464e8d4a5100061091e876004015487600001546118f690919063ffffffff16565b90508015611471576114713382611a13565b505b805461147f9084611e43565b808255600483015461149c9164e8d4a510009161091e91906118f6565b600182015560048101546114b1574360048201555b43600582015560018201546114c69084611e43565b600183015581546114e2906001600160a01b0316333086611e9d565b604080518481529051859133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a350505050565b6115276118f2565b6001600160a01b0316611538610f69565b6001600160a01b031614611581576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6009548151146115c25760405162461bcd60e51b81526004018080602001828103825260248152602001806122fe6024913960400191505060405180910390fd5b805161076f9060099060208401906121e6565b6115dd6118f2565b6001600160a01b03166115ee610f69565b6001600160a01b031614611637576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6001600160a01b038116611692576040805162461bcd60e51b815260206004820152601f60248201527f4475656c5374616b696e673a205a65726f2066656520726563697069656e7400604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b61271081565b6116c26118f2565b6001600160a01b03166116d3610f69565b6001600160a01b03161461171c576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b6001600160a01b0381166117615760405162461bcd60e51b815260040180806020018281038252602681526020018061226d6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6117c46118f2565b6001600160a01b03166117d5610f69565b6001600160a01b03161461181e576040805162461bcd60e51b81526020600482018190526024820152600080516020612322833981519152604482015290519081900360640190fd5b436004541161185e5760405162461bcd60e51b81526004018080602001828103825260258152602001806124596025913960400191505060405180910390fd5b600554811061189e5760405162461bcd60e51b81526004018080602001828103825260358152602001806123426035913960400191505060405180910390fd5b8060048190555060045460066000815481106118b657fe5b90600052602060002090600702016003018190555050565b7f000000000000000000000000000000000000000000000000000000000000000081565b3390565b60008261190557506000610f63565b8282028284828161191257fe5b0414610f8c5760405162461bcd60e51b81526004018080602001828103825260218152602001806122dd6021913960400191505060405180910390fd5b60008082116119a5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816119ae57fe5b049392505050565b600082821115611a0d576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a8257600080fd5b505afa158015611a96573d6000803e3d6000fd5b505050506040513d6020811015611aac57600080fd5b5051905080821115611b61577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611b2f57600080fd5b505af1158015611b43573d6000803e3d6000fd5b505050506040513d6020811015611b5957600080fd5b50611c059050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb84846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015611bd857600080fd5b505af1158015611bec573d6000803e3d6000fd5b505050506040513d6020811015611c0257600080fd5b50505b505050565b600080611c178484611efd565b90506000811580611c405750600a600081548110611c3157fe5b90600052602060002001548211155b15611c65576009600081548110611c5357fe5b90600052602060002001549050611dbb565b600a600081548110611c7357fe5b906000526020600020015482118015611ca45750600a600181548110611c9557fe5b90600052602060002001548211155b15611cb7576009600181548110611c5357fe5b600a600181548110611cc557fe5b906000526020600020015482118015611cf65750600a600281548110611ce757fe5b90600052602060002001548211155b15611d09576009600281548110611c5357fe5b600a600281548110611d1757fe5b906000526020600020015482118015611d485750600a600381548110611d3957fe5b90600052602060002001548211155b15611d5b576009600381548110611c5357fe5b600a600381548110611d6957fe5b906000526020600020015482118015611d9a5750600a600481548110611d8b57fe5b90600052602060002001548211155b15611dbb576009600481548110611dad57fe5b906000526020600020015490505b949350505050565b6000610f8c61271061091e611dd882876119b6565b85906118f6565b6000610f8c61271061091e84866118f6565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611c05908490611f65565b600082820183811015610f8c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611ef7908590611f65565b50505050565b60008281526007602090815260408083206001600160a01b03851684529091528120600381015415611f4c576000611f428260030154436119b690919063ffffffff16565b9250610f63915050565b6000611f428260040154436119b690919063ffffffff16565b6060611fba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120169092919063ffffffff16565b805190915015611c0557808060200190516020811015611fd957600080fd5b5051611c055760405162461bcd60e51b815260040180806020018281038252602a8152602001806123d1602a913960400191505060405180910390fd5b6060611dbb84846000858561202a8561213c565b61207b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106120ba5780518252601f19909201916020918201910161209b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461211c576040519150601f19603f3d011682016040523d82523d6000602084013e612121565b606091505b5091509150612131828286612142565b979650505050505050565b3b151590565b60608315612151575081610f8c565b8251156121615782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156121ab578181015183820152602001612193565b50505050905090810190601f1680156121d85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215612221579160200282015b82811115612221578251825591602001919060010190612206565b5061222d929150612231565b5090565b5b8082111561222d576000815560010161223256fe4475656c5374616b696e673a204e6f7420616c6c2075736572732068617320636c61696d65644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734475656c5374616b696e673a204d61782070657220626c6f636b20333020746f6b656e734475656c5374616b696e673a204661726d696e6720686173206265656e2066696e6973686564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774475656c5374616b696e673a204665655374616765206172726179206d69736d617463684f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724475656c5374616b696e673a20537461727420626c6f636b2073686f756c64206265206c657373207468656e20656e64426c6f636b4475656c5374616b696e673a204d696e2070657220626c6f636b203120746f6b656e4475656c5374616b696e673a20456e6420626c6f636b2073686f756c642062652067726561746572207468656e207374617274426c6f636b5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644475656c5374616b696e673a20426c6f636b44656c74614665655374616765206172726179206d69736d617463684475656c5374616b696e673a20576974686472617720616d6f756e742065786365656473207573657220616d6f756e744475656c5374616b696e673a204661726d696e6720686173206265656e2073746172746564a26469706673582212200d4221e0b1746af370b3df01b04771aba595864b09e92b911bd29cb7b3b7bc9f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAllocation(uint256,uint256)": {
        "details": "Add pool reward allocation. Can only be called by the owner."
      },
      "claimLeftovers()": {
        "details": "Sends leftover tokens to the fee recipient, only owner."
      },
      "deposit(uint256,uint256)": {
        "details": "Deposit tokens to DuelStaking for reward token allocation."
      },
      "emergencyWithdraw(uint256)": {
        "details": "Withdraw without caring about rewards. EMERGENCY ONLY. This has 25% slashing fee as same block withdrawals to prevent abuse of this function."
      },
      "getMultiplier(uint256,uint256)": {
        "details": "Returns reward multiplier over the given _from to _to block."
      },
      "getPendingRewards(uint256,address)": {
        "details": "Returns pending rewards for user."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBlockDeltaFeeStage(uint256[])": {
        "details": "Updates block delta fee stage array, only owner. i.e. [0,1200,2400,3600,4800] for BSC 1200 block ~ 1 hour must be length of 5"
      },
      "setEndBlock(uint256)": {
        "details": "Updates end block, only owner."
      },
      "setFeeRecipient(address)": {
        "details": "Updates fee recipient, only owner."
      },
      "setFeeStage(uint256[])": {
        "details": "Updates fee stage, only owner. i.e. [2500,400,300,200,100] = [25%,4%,3%,2%,1%] must be length of 5"
      },
      "setMultiplier(uint256)": {
        "details": "Updates reward multiplier, only owner."
      },
      "setStartBlock(uint256)": {
        "details": "Updates start block, only owner."
      },
      "setTokenPerBlock(uint256)": {
        "details": "Updates reward per block, only owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "details": "Updates reward vairables for the pool."
      },
      "withdraw(uint256,uint256)": {
        "details": "Withdraw LP tokens from DuelStaking."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 290,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4279,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4282,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "tokenPerBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4285,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "bonusMultiplier",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4287,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "startBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4289,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "endBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4292,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "poolInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(PoolInfo)4272_storage)dyn_storage"
      },
      {
        "astId": 4298,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "userInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4257_storage))"
      },
      {
        "astId": 4301,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4304,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "feeStage",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4307,
        "contract": "contracts/DuelStaking.sol:DuelStaking",
        "label": "blockDeltaFeeStage",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)4272_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)4272_storage",
        "encoding": "dynamic_array",
        "label": "struct DuelStaking.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1387": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)4257_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DuelStaking.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)4257_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)4257_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct DuelStaking.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)4257_storage)"
      },
      "t_struct(PoolInfo)4272_storage": {
        "encoding": "inplace",
        "label": "struct DuelStaking.PoolInfo",
        "members": [
          {
            "astId": 4259,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1387"
          },
          {
            "astId": 4261,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "supply",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4263,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4265,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4267,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "accTokenPerShare",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4269,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "totalAllocation",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4271,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "totalReward",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(UserInfo)4257_storage": {
        "encoding": "inplace",
        "label": "struct DuelStaking.UserInfo",
        "members": [
          {
            "astId": 4246,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4248,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4250,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "rewardDebtAtBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4252,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "lastWithdrawBlock",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4254,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "firstDepositBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4256,
            "contract": "contracts/DuelStaking.sol:DuelStaking",
            "label": "lastDepositBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}